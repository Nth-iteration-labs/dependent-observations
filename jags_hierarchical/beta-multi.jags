model {

	# Model for lowest level
	# Bernoulli p.j
	# p.j ~ beta(a[j], b[j])
	
	for (i in 1: N){
		y[i] ~ dbern(p.hat[i])						# Observations are bernoulli p.j
	  	p.hat[i] ~ dbeta(a[id[i]]+1, b[id[i]]+1)	# MAP from beta w. 1,1 prior
	}
	
	
	# Model for upper level including priors
	# a[j], b[j] transform to u[j] and M[j]
	# add priors (+2)
	
	# u[j] beta prior
	# M[j] 0-truncated poison
	
	for (j in 1: J){
	
		# Beta a,b for each
		a[j] <- u[j] * M[j]
		b[j] <- M[j] - a[j]
		
		# From priors using a beta u, M
		M[j] <- M.int[j]+2
		
		u[j] ~ dbeta(1,1)
		M.int[j] ~ dpois(1)
		
		# Store p.j to obtain draws easily
		# This is not part of the model, but easier for sampling
		p[j] <- a[j]/(a[j]+b[j])
	}
	
}
